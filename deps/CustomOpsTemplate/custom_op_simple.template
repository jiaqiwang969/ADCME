#include "tensorflow/core/framework/op_kernel.h"
#include "tensorflow/core/framework/tensor_shape.h"
#include "tensorflow/core/platform/default/logging.h"
#include "tensorflow/core/framework/shape_inference.h"
#include "tensorflow/core/lib/core/status.h"
#include "tensorflow/core/lib/core/error_codes.pb.h"
#include<cmath>
#include<string> 
using std::string;

using namespace tensorflow;
#include "${OperatorName}.h"
REGISTER_OP("${OperatorName}")
${AttributesReg}
${ForwardInputOutput}
.SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {
    ${SetShapeFn}
    return Status::OK();
  });

class ${OperatorName}Op : public OpKernel {
private:
  ${AttributesDef}
public:
  explicit ${OperatorName}Op(OpKernelConstruction* context) : OpKernel(context) {
${AttributesParse2}
  }

  void Compute(OpKernelContext* context) override {    
    DCHECK_EQ(${ForwarInputNum}, context->num_inputs());
    
    ${ForwardTensor}
    
    ${ForwardTensorShape}
    
    ${ForwardCheckShape}

    // extra check
        
    // create output shape
    ${ForwardOutputShape}
            
    // create output tensor
    ${ForwardOutput}
    
    // get the corresponding Eigen tensors for data access
    ${ForwardGetData}   

    // implement your forward function here 

    // TODO:

  }
};
REGISTER_KERNEL_BUILDER(Name("${OperatorName}").Device(DEVICE_CPU), ${OperatorName}Op);
